<project name="ghbackup" default="main" basedir=".">
    <description>
        Beispiel f√ºr das Backup aller Repos eines User von github
    </description>

    <taskdef uri="antlib:net.sf.antcontrib"
             resource="net/sf/antcontrib/antlib.xml"
             classpath="${user.home}/.m2/repository/ant-contrib/ant-contrib/1.0b3/ant-contrib-1.0b3.jar"/>


    <antversion property="antversion" atleast="1.10"/>
    <echo message="ANT Version: ${antversion}"/>
    <fail message="!!!! ANT VERSION >= 1.10 erforderlich !!!!" unless="antversion"/>


    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="../github"/>
        <input message="Please enter github personal access token:"
               addproperty="gpa-token"/>
        <property name="repowoner" value="huluvu424242"/>
        <echoproperties/>
    </target>

    <target name="list" depends="init"
            description="create a list or user repos from github">

        <get src="https://api.github.com/users/${repowoner}/repos"
             dest="../github/repoliste.json"
             verbose="true"
             usetimestamp="true">
            <header name="Authorization" value="${gpa-token}"/>
            <header name="Accept" value="application/vnd.github.full+json"/>
        </get>

        <!--        <ac:var name="varname" value="value"/>-->
    </target>

    <target name="main" depends="list">
        <property name="plugin_classpath" refid="maven.plugin.classpath"/>
        <generatedist/>
    </target>

    <scriptdef name="generatedist"
               description="generate the distribution"
               language="javascript"
               manager="auto"
               classpath="${plugin_classpath}"
    >
        <![CDATA[
            // Load compatibility script
            load("nashorn:mozilla_compat.js");
            importClass(java.io.File);
            importClass(java.io.FileReader);
            importClass(java.io.BufferedReader);
            importClass(java.io.FileWriter);
            importClass(java.io.BufferedWriter);

            var file = new File("../github/repoliste.json");
            fr = new FileReader(file);
            br = new BufferedReader(fr);

            // Read the file we just retrieved from the webservice that contains JSON.
            var json = br.readLine();

            // Evaluate the serialized JSON
            var struct = eval("(" + json + ")");

                echo = project.createTask("echo");
                echo.setFile(new File("../github/clonerepos.sh"));
                echo.setAppend(true);
                echo.setMessage("#!/bin/sh\n\n");
                echo.perform();


            for (i = 0; i < struct.length; i++) {
                var name = struct[i].name;
                var clone_url = struct[i].clone_url;

                echo.setMessage("\n# ["+i+"] clone " + name);
                echo.perform();
                echo.setMessage("\ngit clone --mirror " + clone_url);
                echo.perform();
                echo.setMessage("\ncd "+ name + ".git;git remote update; cd ..\n");
                echo.perform();
            }
        ]]>
    </scriptdef>

    <target name="clean"
            description="clean up">
        <delete file="../github/clonerepos.sh"/>
        <delete file="../github/repoliste.json"/>
    </target>
</project>
